---

- name: Get stat for the original img file
  stat:
    path: "{{ img_file }}"
  register: img_file_stat
  failed_when:
    - not img_file_stat.stat.exists

- name: Check for existence of keys archive
  stat:
    path: "{{ keys_file }}"
  register: keys_file_stat
  when: keys_file is defined
  failed_when:
    - not keys_file_stat.stat.exists

- import_tasks: usb_mgmt.yaml

- name: Create the keys partition
  community.general.parted:
    device: "{{ usb_disk_path }}"
    label: gpt
    name: "Keys"
    number: 1
    part_end: 20MB
    fs_type: fat16
    state: present
  register: parted_keys

- name: Create the data partition
  community.general.parted:
    device: "{{ usb_disk_path }}"
    label: gpt
    name: "Data"
    number: 2
    state: present
    fs_type: ext4
    part_start: 20MB
    part_end: "100%"
  
- name: Put a filesystem on the Keys partition
  filesystem:
    fstype: vfat
    dev: "/dev/{{device}}1"
    force: true
  register: keys_fs

- name: Put a filesystem on the Data partition
  filesystem:
    fstype: ext4
    dev: "/dev/{{device}}2"
    force: true

- import_tasks: remount_usb.yaml

- name: Mount the keys partition
  mount:
    path: /tmp/keys
    src: "/dev/{{device}}1"
    fstype: vfat
    state: mounted

- name: Mount the data partition
  mount:
    path: /tmp/data
    src: "/dev/{{device}}2"
    fstype: ext4
    state: mounted

- name: Untar keys, if present
  unarchive:
    src: "{{ keys_file }}"
    dest: "/tmp/keys/"
    remote_src: no
  when: 
    - keys_file is defined
    - keys_file_stat.stat.exists

- name: Copy the OS image to the Data partition. (This make take a few minutes.)
  copy:
    src: "{{ img_file }}"
    dest: "/tmp/data/"
  
- name: UnMount the keys partition
  mount:
    path: /tmp/keys
    state: unmounted

- name: UnMount the data partition
  mount:
    path: /tmp/data
    state: unmounted
