---

- name: Check for existence of img file
  ansible.builtin.stat:
    path: "{{ img_file }}"
    get_checksum: no
  register: img_file_stat
  failed_when:
    - not img_file_stat.stat.exists

- name: Check for existence of keys archive
  ansible.builtin.stat:
    path: "{{ keys_file }}"
    get_checksum: no
  register: keys_file_stat
  when: keys_file is defined
  failed_when:
    - not keys_file_stat.stat.exists

- import_tasks: usb_mgmt.yaml

- import_tasks: partition_vx-img.yaml

- name: Get the Keys mountpoint
  ansible.builtin.command: lsblk -no mountpoint "/dev/{{ device }}1"
  register: keys_mnt

- name: Get the Data mountpoint
  ansible.builtin.command: lsblk -no mountpoint "/dev/{{ device }}2"
  register: data_mnt

#-- This may seem excessive, but we need files at Keys/*
#-- Since the tarball is manually created, let's find them, regardless of possible sub-directories
#-- and put them in the right place
- block:
    - name: Create a tmp dir to extract keys to
      ansible.builtin.tempfile:
        state: directory
        suffix: keys
      register: tmp_keys_dir

    - name: Extract keys
      ansible.builtin.unarchive:
        src: "{{ keys_file }}"
        dest: "{{ tmp_keys_dir.path }}/"
        remote_src: yes
      register: keys_extracted

    - name: Find the extracted files
      ansible.builtin.find:
        path: "{{ tmp_keys_dir.path }}/"
        recurse: yes
        file_type: file
      register: tmp_key_files

    - name: Copy the files to the USB
      ansible.builtin.copy:
        src: "{{ item.path }}"
        dest: "{{ keys_mnt.stdout }}/"
        remote_src: true
      with_items:
        - "{{ tmp_key_files.files }}"

    - name: Remove the temp dir and contents
      ansible.builtin.file:
        path: "{{ tmp_keys_dir.path }}"
        state: absent

  when: 
    - keys_file is defined
    - keys_file_stat.stat.exists

#-- NOTE: remote_src needs to be true since we operate in localhost mode
#--       This prevents an unnecessary temporary copy of the file being created
- name: Copy the OS image to the Data partition. (This may take a few minutes.)
  ansible.builtin.copy:
    src: "{{ img_file }}"
    dest: "{{ data_mnt.stdout }}/"
    remote_src: true

- name: Sync the USB to ensure all data has been written. (This may take a few minutes.)
  ansible.builtin.command: /usr/bin/sync
